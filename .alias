export EDITOR="vim"
alias sa="source $HOME/.alias"
alias v="view"
alias df="df -h"
alias open='explorer.exe'
alias ccat='pygmentize -g -O style=vim'
alias transpose="csvtool transpose -"
alias col="sed 's/,/╥/' | column -s╥ -t"

alias grpe='grep'
alias Grep='grep'
alias cusl='curl -s'
alias Jq='jq'

function home() {
  #PIIP=$(curl 'https://api.ipify.me' | awk '{print $1}')
  PIIP="47.234.133.113"
  ssh -p 3122 skotep@${PIIP}
}

alias dokku='docker exec -it dokku dokku'

function ffind() {
  local DIR=$1; shift
  find ${DIR} -type f $@
}
alias sls="login_to_aws_resources && aws ecr get-login-password --region us-east-1 | helm registry login --username AWS --password-stdin 724664234782.dkr.ecr.us-east-1.amazonaws.com"
alias lca="rm ${HOME}/.aws/cli/cache/*.json; aws s3 ls && login_to_codeartifact"

alias diffys='diff -t --side-by-side --suppress-common-lines'

function lower() {
    echo $@ | tr '[:upper:]' '[:lower:]'
}

function check_vpn() {
  if [ -n "$(\ipconfig.exe | grep '10\.')" ]; then
    return 0
  else
    return 1
  fi
}   

export GOBIN="/usr/local/go/bin"
export GOPRIVATE="*.striveworks.us"

alias sync_clock="sudo hwclock -s"

alias k="kubectl"
#alias kc="kubectl config use-context chariot"
#alias kdev="kubectl config use-context s.pollack-dev.k8s.striveworks.us"
#alias kprod="kubectl config use-context s.pollack-kubernetes.striveworks.us"
#alias kadmin="kubectl config use-context kubernetes.striveworks.us"
#alias kprem="kubectl config use-context s.pollack-on-prem"
#alias klocal="kubectl config use-context kind-knative"

function kj() {
  kubectl exec -it $1 -- sh
}

alias dprod="docker login core.harbor.kubernetes.striveworks.us"

alias aws='/usr/local/bin/aws'

function lsp() {
  lsof -n -i4TCP:$1
}
function killport() {
    local PORT=$(lsof -n -i4TCP:$1 | grep LISTEN | awk '{print $2}')
    kill -9 ${PORT}
}

function ffind() {
  local DIR=$1; shift
  find ${DIR} -type f $@
}

function vf() {
  src=$2
  if [ -z "${src}" ]; then src="."; fi
  FILES=($(find "${src}" | \grep $1))
  if [ "${#FILES[@]}" == 1 ]; then
    echo "${FILES[0]}"
    vi "${FILES[0]}"
  else
    select FILENAME in ${FILES[@]}; do
      echo "${FILENAME}"
      vi "${FILENAME}"
      break
    done
  fi
}

function ip() {
  curl -s https://api.ipify.org
}

alias npip="pip install -U --trusted-host artifact.striveworks.us -i https://artifact.striveworks.us:8443/repository/pypi-group/simple"

    
source $HOME/.gitalias 

function fmt() {
    git status -s | \grep '\.go' | while read m file; do
        echo "formatting ${file} in place..."; gofmt -w "${file}"
    done
}

function get_pgpwd() {
    local PWDFILE="${HOME}/.chariot/pg_dev.pwd"
    if $(check_vpn); then
        if [ -n "$1" ] || [ $((($(date +%s) - $(date +%s -r "${PWDFILE}")) / 86400)) -ge 1 ]; then
            echo "fetching password..."
            kubectl get secret --namespace chariot postgresql \
                -o jsonpath="{.data.postgresql-password}" |\
                 base64 --decode > ${PWDFILE}
        fi
    fi
    export ENV_DATABASE_PASSWORD=$(cat ${PWDFILE})
    echo "${ENV_DATABASE_PASSWORD}"
}

export CHARIOT_ECR_REGISTRY="724664234782.dkr.ecr.us-east-1.amazonaws.com/library"
export CHARIOT_ECR_REPOSITORY="${CHARIOT_ECR_REGISTRY}"
export CHARIOT_ECR_REGION="us-east-1"
export ENV_DATABASE_PASSWORD="$(get_pgpwd)"
export s3teddy="s3://striveworks-role-developer-teddy-artifacts"

alias aca="aws codeartifact login --tool pip --repository striveworks --domain striveworks --domain-owner 724664234782 --region us-east-1"

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;36m'
NC='\033[0m'

export PYTHONDONTWRITEBYTECODE=1

#export ROME="2FTGPqQoqtHpMdIU7sJEyvwLXyR"
export ROME="2H3cWdtk4hbFGZmG7SObwIiQTR4"
export GLOBAL="2H3PvXkm8pycgDwYzj7zz8hukK3"

source $HOME/.kuberc

alias dils="docker images --format '{{.Size}}\t{{.ID}} {{.Repository}}:{{.Tag}}' | sort -k 3"
alias pils="podman images --format '{{.Size}}\t{{.ID}} {{.Repository}}:{{.Tag}}' | sort -k 3"

alias cpy="/home/s.pollack/src/chariot/py/libs/sdk/.venv/bin/python"
alias chariot="/home/s.pollack/src/chariot/py/libs/sdk/.venv/bin/chariot"
alias bfg="java -jar /home/s.pollack/tmp/bfg-1.14.0.jar"

#export CGO_ENABLED=0

function ecr(){
  aws ecr describe-images --repository-name library/chariot-$1 --filter tagStatus=TAGGED \
    --query 'sort_by(imageDetails,& imagePushedAt)' | jq -r '.[] | [.imagePushedAt,.imageTags[]] | @csv' |\
    col
}

function ecrc(){
  aws ecr describe-images --repository-name library-charts/$1 --filter tagStatus=TAGGED \
    --query 'sort_by(imageDetails,& imagePushedAt)' | jq -r '.[] | [.imagePushedAt,.imageTags[]] | @csv' |\
    col
}
